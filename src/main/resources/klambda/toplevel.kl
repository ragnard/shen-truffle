"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(set shen.*continue-repl-loop* true)

(defun exit (V3996) (set shen.*continue-repl-loop* false))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (if (value shen.*continue-repl-loop*) (shen.loop) exit)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3998) (cond ((= () V3998) ()) ((and (cons? V3998) (cons? (tl V3998))) (do (set (hd V3998) (hd (tl V3998))) (shen.multiple-set (tl (tl V3998))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V4000) (declare V4000 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V4012 V4013) (cond ((and (tuple? V4012) (and (cons? (snd V4012)) (element? (hd (snd V4012)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V4012) (tl (snd V4012))) V4013)) ((and (tuple? V4012) (and (cons? (snd V4012)) (and (cons? (tl (snd V4012))) (and (= () (tl (tl (snd V4012)))) (and (cons? V4013) (and (= (hd (snd V4012)) (shen.exclamation)) (= (hd (tl (snd V4012))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V4013))) (hd V4013))) ((and (tuple? V4012) (and (cons? (snd V4012)) (= (hd (snd V4012)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V4012)) V4013) (let Find (head (shen.find-past-inputs Key? V4013)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V4012) (and (cons? (snd V4012)) (and (= () (tl (snd V4012))) (= (hd (snd V4012)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V4013) 0) (abort))) ((and (tuple? V4012) (and (cons? (snd V4012)) (= (hd (snd V4012)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V4012)) V4013) (let Pastprint (shen.print-past-inputs Key? (reverse V4013) 0) (abort)))) (true V4012)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V4015) (do (for-each (lambda Byte (pr (n->string Byte) (stoutput))) V4015) (nl 1)))

(defun shen.update_history (V4018 V4019) (set shen.*history* (cons V4018 V4019)))

(defun shen.toplineread () (shen.toplineread_loop (read-char-code (stinput)) ()))

(defun shen.toplineread_loop (V4023 V4024) (cond ((and (= -1 V4023) (= () V4024)) (exit 0)) ((= V4023 (shen.hat)) (simple-error "line read aborted")) ((element? V4023 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V4024 (lambda E shen.nextline)) (let It (shen.record-it V4024) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-char-code (stinput)) (append V4024 (cons V4023 ()))) (@p Line V4024))))) (true (shen.toplineread_loop (read-char-code (stinput)) (if (= V4023 -1) V4024 (append V4024 (cons V4023 ())))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V4030) (cond ((= + V4030) (set shen.*tc* true)) ((= - V4030) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V4032) (shen.toplevel_evaluate V4032 (value shen.*tc*)))

(defun shen.find-past-inputs (V4035 V4036) (let F (shen.find V4035 V4036) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V4039 V4040) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V4039 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V4040)))) (lambda X (shen.prefix? V4039 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V4042) (cond ((and (cons? V4042) (= (hd V4042) (shen.space))) (shen.trim-gubbins (tl V4042))) ((and (cons? V4042) (= (hd V4042) (shen.newline))) (shen.trim-gubbins (tl V4042))) ((and (cons? V4042) (= (hd V4042) (shen.carriage-return))) (shen.trim-gubbins (tl V4042))) ((and (cons? V4042) (= (hd V4042) (shen.tab))) (shen.trim-gubbins (tl V4042))) ((and (cons? V4042) (= (hd V4042) (shen.left-round))) (shen.trim-gubbins (tl V4042))) (true V4042)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V4051 V4052) (cond ((= () V4052) ()) ((and (cons? V4052) (V4051 (hd V4052))) (cons (hd V4052) (shen.find V4051 (tl V4052)))) ((cons? V4052) (shen.find V4051 (tl V4052))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V4066 V4067) (cond ((= () V4066) true) ((and (cons? V4066) (and (cons? V4067) (= (hd V4067) (hd V4066)))) (shen.prefix? (tl V4066) (tl V4067))) (true false)))

(defun shen.print-past-inputs (V4079 V4080 V4081) (cond ((= () V4080) _) ((and (cons? V4080) (not (V4079 (hd V4080)))) (shen.print-past-inputs V4079 (tl V4080) (+ V4081 1))) ((and (cons? V4080) (tuple? (hd V4080))) (do (shen.prhush (shen.app V4081 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V4080))) (shen.print-past-inputs V4079 (tl V4080) (+ V4081 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V4084 V4085) (cond ((and (cons? V4084) (and (cons? (tl V4084)) (and (= : (hd (tl V4084))) (and (cons? (tl (tl V4084))) (and (= () (tl (tl (tl V4084)))) (= true V4085)))))) (shen.typecheck-and-evaluate (hd V4084) (hd (tl (tl V4084))))) ((and (cons? V4084) (cons? (tl V4084))) (do (shen.toplevel_evaluate (cons (hd V4084) ()) V4085) (do (nl 1) (shen.toplevel_evaluate (tl V4084) V4085)))) ((and (cons? V4084) (and (= () (tl V4084)) (= true V4085))) (shen.typecheck-and-evaluate (hd V4084) (gensym A))) ((and (cons? V4084) (and (= () (tl V4084)) (= false V4085))) (let Eval (shen.eval-without-macros (hd V4084)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V4088 V4089) (let Typecheck (shen.typecheck V4088 V4089) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V4088) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V4091) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V4091) V4091))

(defun shen.extract-pvars (V4097) (cond ((shen.pvar? V4097) (cons V4097 ())) ((cons? V4097) (union (shen.extract-pvars (hd V4097)) (shen.extract-pvars (tl V4097)))) (true ())))

(defun shen.mult_subst (V4105 V4106 V4107) (cond ((= () V4105) V4107) ((= () V4106) V4107) ((and (cons? V4105) (cons? V4106)) (shen.mult_subst (tl V4105) (tl V4106) (subst (hd V4105) (hd V4106) V4107))) (true (shen.f_error shen.mult_subst))))



