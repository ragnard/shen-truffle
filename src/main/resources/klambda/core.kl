"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen->kl (V1385 V1386) (compile (lambda X (shen.<define> X)) (cons V1385 V1386) (lambda X (shen.shen-syntax-error V1385 X))))

(defun shen.shen-syntax-error (V1393 V1394) (cond ((cons? V1394) (simple-error (cn "syntax error in " (shen.app V1393 (cn " here:

 " (shen.app (shen.next-50 50 (hd V1394)) "
" shen.a)) shen.a)))) (true (simple-error (cn "syntax error in " (shen.app V1393 "
" shen.a))))))

(defun shen.<define> (V1396) (let YaccParse (let Parse_shen.<name> (shen.<name> V1396) (if (not (= (fail) Parse_shen.<name>)) (let Parse_shen.<signature> (shen.<signature> Parse_shen.<name>) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_shen.<rules> (shen.<rules> Parse_shen.<signature>) (if (not (= (fail) Parse_shen.<rules>)) (shen.pair (hd Parse_shen.<rules>) (shen.compile_to_machine_code (shen.hdtl Parse_shen.<name>) (shen.hdtl Parse_shen.<rules>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<name> (shen.<name> V1396) (if (not (= (fail) Parse_shen.<name>)) (let Parse_shen.<rules> (shen.<rules> Parse_shen.<name>) (if (not (= (fail) Parse_shen.<rules>)) (shen.pair (hd Parse_shen.<rules>) (shen.compile_to_machine_code (shen.hdtl Parse_shen.<name>) (shen.hdtl Parse_shen.<rules>))) (fail))) (fail))) YaccParse)))

(defun shen.<name> (V1398) (if (cons? (hd V1398)) (let Parse_X (hd (hd V1398)) (shen.pair (hd (shen.pair (tl (hd V1398)) (shen.hdtl V1398))) (if (and (symbol? Parse_X) (not (shen.sysfunc? Parse_X))) Parse_X (simple-error (shen.app Parse_X " is not a legitimate function name.
" shen.a))))) (fail)))

(defun shen.sysfunc? (V1400) (element? V1400 (get (intern "shen") shen.external-symbols (value *property-vector*))))

(defun shen.<signature> (V1402) (if (and (cons? (hd V1402)) (= { (hd (hd V1402)))) (let Parse_shen.<signature-help> (shen.<signature-help> (shen.pair (tl (hd V1402)) (shen.hdtl V1402))) (if (not (= (fail) Parse_shen.<signature-help>)) (if (and (cons? (hd Parse_shen.<signature-help>)) (= } (hd (hd Parse_shen.<signature-help>)))) (shen.pair (hd (shen.pair (tl (hd Parse_shen.<signature-help>)) (shen.hdtl Parse_shen.<signature-help>))) (shen.demodulate (shen.curry-type (shen.hdtl Parse_shen.<signature-help>)))) (fail)) (fail))) (fail)))

(defun shen.curry-type (V1404) (cond ((and (cons? V1404) (and (cons? (tl V1404)) (and (= --> (hd (tl V1404))) (and (cons? (tl (tl V1404))) (and (cons? (tl (tl (tl V1404)))) (= --> (hd (tl (tl (tl V1404)))))))))) (shen.curry-type (cons (hd V1404) (cons --> (cons (tl (tl V1404)) ()))))) ((and (cons? V1404) (and (cons? (tl V1404)) (and (= * (hd (tl V1404))) (and (cons? (tl (tl V1404))) (and (cons? (tl (tl (tl V1404)))) (= * (hd (tl (tl (tl V1404)))))))))) (shen.curry-type (cons (hd V1404) (cons * (cons (tl (tl V1404)) ()))))) ((cons? V1404) (map (lambda Z (shen.curry-type Z)) V1404)) (true V1404)))

(defun shen.<signature-help> (V1406) (let YaccParse (if (cons? (hd V1406)) (let Parse_X (hd (hd V1406)) (let Parse_shen.<signature-help> (shen.<signature-help> (shen.pair (tl (hd V1406)) (shen.hdtl V1406))) (if (not (= (fail) Parse_shen.<signature-help>)) (if (not (element? Parse_X (cons { (cons } ())))) (shen.pair (hd Parse_shen.<signature-help>) (cons Parse_X (shen.hdtl Parse_shen.<signature-help>))) (fail)) (fail)))) (fail)) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1406) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<rules> (V1408) (let YaccParse (let Parse_shen.<rule> (shen.<rule> V1408) (if (not (= (fail) Parse_shen.<rule>)) (let Parse_shen.<rules> (shen.<rules> Parse_shen.<rule>) (if (not (= (fail) Parse_shen.<rules>)) (shen.pair (hd Parse_shen.<rules>) (cons (shen.linearise (shen.hdtl Parse_shen.<rule>)) (shen.hdtl Parse_shen.<rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<rule> (shen.<rule> V1408) (if (not (= (fail) Parse_shen.<rule>)) (shen.pair (hd Parse_shen.<rule>) (cons (shen.linearise (shen.hdtl Parse_shen.<rule>)) ())) (fail))) YaccParse)))

(defun shen.<rule> (V1410) (let YaccParse (let Parse_shen.<patterns> (shen.<patterns> V1410) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= -> (hd (hd Parse_shen.<patterns>)))) (let Parse_shen.<action> (shen.<action> (shen.pair (tl (hd Parse_shen.<patterns>)) (shen.hdtl Parse_shen.<patterns>))) (if (not (= (fail) Parse_shen.<action>)) (if (and (cons? (hd Parse_shen.<action>)) (= where (hd (hd Parse_shen.<action>)))) (let Parse_shen.<guard> (shen.<guard> (shen.pair (tl (hd Parse_shen.<action>)) (shen.hdtl Parse_shen.<action>))) (if (not (= (fail) Parse_shen.<guard>)) (shen.pair (hd Parse_shen.<guard>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (cons where (cons (shen.hdtl Parse_shen.<guard>) (cons (shen.hdtl Parse_shen.<action>) ()))) ()))) (fail))) (fail)) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<patterns> (shen.<patterns> V1410) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= -> (hd (hd Parse_shen.<patterns>)))) (let Parse_shen.<action> (shen.<action> (shen.pair (tl (hd Parse_shen.<patterns>)) (shen.hdtl Parse_shen.<patterns>))) (if (not (= (fail) Parse_shen.<action>)) (shen.pair (hd Parse_shen.<action>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (shen.hdtl Parse_shen.<action>) ()))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<patterns> (shen.<patterns> V1410) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= <- (hd (hd Parse_shen.<patterns>)))) (let Parse_shen.<action> (shen.<action> (shen.pair (tl (hd Parse_shen.<patterns>)) (shen.hdtl Parse_shen.<patterns>))) (if (not (= (fail) Parse_shen.<action>)) (if (and (cons? (hd Parse_shen.<action>)) (= where (hd (hd Parse_shen.<action>)))) (let Parse_shen.<guard> (shen.<guard> (shen.pair (tl (hd Parse_shen.<action>)) (shen.hdtl Parse_shen.<action>))) (if (not (= (fail) Parse_shen.<guard>)) (shen.pair (hd Parse_shen.<guard>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (cons where (cons (shen.hdtl Parse_shen.<guard>) (cons (cons shen.choicepoint! (cons (shen.hdtl Parse_shen.<action>) ())) ()))) ()))) (fail))) (fail)) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<patterns> (shen.<patterns> V1410) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= <- (hd (hd Parse_shen.<patterns>)))) (let Parse_shen.<action> (shen.<action> (shen.pair (tl (hd Parse_shen.<patterns>)) (shen.hdtl Parse_shen.<patterns>))) (if (not (= (fail) Parse_shen.<action>)) (shen.pair (hd Parse_shen.<action>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (cons shen.choicepoint! (cons (shen.hdtl Parse_shen.<action>) ())) ()))) (fail))) (fail)) (fail))) YaccParse)) YaccParse)) YaccParse)))

(defun shen.fail_if (V1413 V1414) (if (V1413 V1414) (fail) V1414))

(defun shen.succeeds? (V1420) (cond ((= V1420 (fail)) false) (true true)))

(defun shen.<patterns> (V1422) (let YaccParse (let Parse_shen.<pattern> (shen.<pattern> V1422) (if (not (= (fail) Parse_shen.<pattern>)) (let Parse_shen.<patterns> (shen.<patterns> Parse_shen.<pattern>) (if (not (= (fail) Parse_shen.<patterns>)) (shen.pair (hd Parse_shen.<patterns>) (cons (shen.hdtl Parse_shen.<pattern>) (shen.hdtl Parse_shen.<patterns>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1422) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<pattern> (V1429) (let YaccParse (if (and (cons? (hd V1429)) (cons? (hd (hd V1429)))) (if (and (cons? (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (= @p (hd (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))))) (let Parse_shen.<pattern1> (shen.<pattern1> (shen.pair (tl (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (shen.hdtl (shen.pair (hd (hd V1429)) (hd (tl V1429)))))) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (tl (hd V1429)) (hd (tl V1429)))) (cons @p (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V1429)) (cons? (hd (hd V1429)))) (if (and (cons? (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (= cons (hd (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))))) (let Parse_shen.<pattern1> (shen.<pattern1> (shen.pair (tl (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (shen.hdtl (shen.pair (hd (hd V1429)) (hd (tl V1429)))))) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (tl (hd V1429)) (hd (tl V1429)))) (cons cons (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V1429)) (cons? (hd (hd V1429)))) (if (and (cons? (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (= @v (hd (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))))) (let Parse_shen.<pattern1> (shen.<pattern1> (shen.pair (tl (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (shen.hdtl (shen.pair (hd (hd V1429)) (hd (tl V1429)))))) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (tl (hd V1429)) (hd (tl V1429)))) (cons @v (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V1429)) (cons? (hd (hd V1429)))) (if (and (cons? (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (= @s (hd (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))))) (let Parse_shen.<pattern1> (shen.<pattern1> (shen.pair (tl (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (shen.hdtl (shen.pair (hd (hd V1429)) (hd (tl V1429)))))) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (tl (hd V1429)) (hd (tl V1429)))) (cons @s (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V1429)) (cons? (hd (hd V1429)))) (if (and (cons? (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (= vector (hd (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))))) (if (and (cons? (hd (shen.pair (tl (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (shen.hdtl (shen.pair (hd (hd V1429)) (hd (tl V1429))))))) (= 0 (hd (hd (shen.pair (tl (hd (shen.pair (hd (hd V1429)) (hd (tl V1429))))) (shen.hdtl (shen.pair (hd (hd V1429)) (hd (tl V1429))))))))) (shen.pair (hd (shen.pair (tl (hd V1429)) (hd (tl V1429)))) (cons vector (cons 0 ()))) (fail)) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (cons? (hd V1429)) (let Parse_X (hd (hd V1429)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1429)) (shen.hdtl V1429))) (shen.constructor-error Parse_X)) (fail))) (fail)) (if (= YaccParse (fail)) (let Parse_shen.<simple_pattern> (shen.<simple_pattern> V1429) (if (not (= (fail) Parse_shen.<simple_pattern>)) (shen.pair (hd Parse_shen.<simple_pattern>) (shen.hdtl Parse_shen.<simple_pattern>)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.constructor-error (V1431) (simple-error (shen.app V1431 " is not a legitimate constructor
" shen.a)))

(defun shen.<simple_pattern> (V1433) (let YaccParse (if (cons? (hd V1433)) (let Parse_X (hd (hd V1433)) (if (= Parse_X _) (shen.pair (hd (shen.pair (tl (hd V1433)) (shen.hdtl V1433))) (gensym Parse_Y)) (fail))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V1433)) (let Parse_X (hd (hd V1433)) (if (not (element? Parse_X (cons -> (cons <- ())))) (shen.pair (hd (shen.pair (tl (hd V1433)) (shen.hdtl V1433))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<pattern1> (V1435) (let Parse_shen.<pattern> (shen.<pattern> V1435) (if (not (= (fail) Parse_shen.<pattern>)) (shen.pair (hd Parse_shen.<pattern>) (shen.hdtl Parse_shen.<pattern>)) (fail))))

(defun shen.<pattern2> (V1437) (let Parse_shen.<pattern> (shen.<pattern> V1437) (if (not (= (fail) Parse_shen.<pattern>)) (shen.pair (hd Parse_shen.<pattern>) (shen.hdtl Parse_shen.<pattern>)) (fail))))

(defun shen.<action> (V1439) (if (cons? (hd V1439)) (let Parse_X (hd (hd V1439)) (shen.pair (hd (shen.pair (tl (hd V1439)) (shen.hdtl V1439))) Parse_X)) (fail)))

(defun shen.<guard> (V1441) (if (cons? (hd V1441)) (let Parse_X (hd (hd V1441)) (shen.pair (hd (shen.pair (tl (hd V1441)) (shen.hdtl V1441))) Parse_X)) (fail)))

(defun shen.compile_to_machine_code (V1444 V1445) (let Lambda+ (shen.compile_to_lambda+ V1444 V1445) (let KL (shen.compile_to_kl V1444 Lambda+) (let Record (shen.record-source V1444 KL) KL))))

(defun shen.record-source (V1450 V1451) (cond ((value shen.*installing-kl*) shen.skip) (true (put V1450 shen.source V1451 (value *property-vector*)))))

(defun shen.compile_to_lambda+ (V1454 V1455) (let Arity (shen.aritycheck V1454 V1455) (let UpDateSymbolTable (shen.update-symbol-table V1454 Arity) (let Free (for-each (lambda Rule (shen.free_variable_check V1454 Rule)) V1455) (let Variables (shen.parameters Arity) (let Strip (map (lambda X (shen.strip-protect X)) V1455) (let Abstractions (map (lambda X (shen.abstract_rule X)) Strip) (let Applications (map (lambda X (shen.application_build Variables X)) Abstractions) (cons Variables (cons Applications ()))))))))))

(defun shen.update-symbol-table (V1458 V1459) (cond ((= 0 V1459) shen.skip) (true (put V1458 shen.lambda-form (eval-kl (shen.lambda-form V1458 V1459)) (value *property-vector*)))))

(defun shen.free_variable_check (V1462 V1463) (cond ((and (cons? V1463) (and (cons? (tl V1463)) (= () (tl (tl V1463))))) (let Bound (shen.extract_vars (hd V1463)) (let Free (shen.extract_free_vars Bound (hd (tl V1463))) (shen.free_variable_warnings V1462 Free)))) (true (shen.f_error shen.free_variable_check))))

(defun shen.extract_vars (V1465) (cond ((variable? V1465) (cons V1465 ())) ((cons? V1465) (union (shen.extract_vars (hd V1465)) (shen.extract_vars (tl V1465)))) (true ())))

(defun shen.extract_free_vars (V1477 V1478) (cond ((and (cons? V1478) (and (cons? (tl V1478)) (and (= () (tl (tl V1478))) (= (hd V1478) protect)))) ()) ((and (variable? V1478) (not (element? V1478 V1477))) (cons V1478 ())) ((and (cons? V1478) (and (= lambda (hd V1478)) (and (cons? (tl V1478)) (and (cons? (tl (tl V1478))) (= () (tl (tl (tl V1478)))))))) (shen.extract_free_vars (cons (hd (tl V1478)) V1477) (hd (tl (tl V1478))))) ((and (cons? V1478) (and (= let (hd V1478)) (and (cons? (tl V1478)) (and (cons? (tl (tl V1478))) (and (cons? (tl (tl (tl V1478)))) (= () (tl (tl (tl (tl V1478)))))))))) (union (shen.extract_free_vars V1477 (hd (tl (tl V1478)))) (shen.extract_free_vars (cons (hd (tl V1478)) V1477) (hd (tl (tl (tl V1478))))))) ((cons? V1478) (union (shen.extract_free_vars V1477 (hd V1478)) (shen.extract_free_vars V1477 (tl V1478)))) (true ())))

(defun shen.free_variable_warnings (V1483 V1484) (cond ((= () V1484) _) (true (simple-error (cn "error: the following variables are free in " (shen.app V1483 (cn ": " (shen.app (shen.list_variables V1484) "" shen.a)) shen.a))))))

(defun shen.list_variables (V1486) (cond ((and (cons? V1486) (= () (tl V1486))) (cn (str (hd V1486)) ".")) ((cons? V1486) (cn (str (hd V1486)) (cn ", " (shen.list_variables (tl V1486))))) (true (shen.f_error shen.list_variables))))

(defun shen.strip-protect (V1488) (cond ((and (cons? V1488) (and (cons? (tl V1488)) (and (= () (tl (tl V1488))) (= (hd V1488) protect)))) (shen.strip-protect (hd (tl V1488)))) ((cons? V1488) (map (lambda Z (shen.strip-protect Z)) V1488)) (true V1488)))

(defun shen.linearise (V1490) (cond ((and (cons? V1490) (and (cons? (tl V1490)) (= () (tl (tl V1490))))) (shen.linearise_help (shen.flatten (hd V1490)) (hd V1490) (hd (tl V1490)))) (true (shen.f_error shen.linearise))))

(defun shen.flatten (V1492) (cond ((= () V1492) ()) ((cons? V1492) (append (shen.flatten (hd V1492)) (shen.flatten (tl V1492)))) (true (cons V1492 ()))))

(defun shen.linearise_help (V1496 V1497 V1498) (cond ((= () V1496) (cons V1497 (cons V1498 ()))) ((cons? V1496) (if (and (variable? (hd V1496)) (element? (hd V1496) (tl V1496))) (let Var (gensym (hd V1496)) (let NewAction (cons where (cons (cons = (cons (hd V1496) (cons Var ()))) (cons V1498 ()))) (let NewPatts (shen.linearise_X (hd V1496) Var V1497) (shen.linearise_help (tl V1496) NewPatts NewAction)))) (shen.linearise_help (tl V1496) V1497 V1498))) (true (shen.f_error shen.linearise_help))))

(defun shen.linearise_X (V1511 V1512 V1513) (cond ((= V1513 V1511) V1512) ((cons? V1513) (let L (shen.linearise_X V1511 V1512 (hd V1513)) (if (= L (hd V1513)) (cons (hd V1513) (shen.linearise_X V1511 V1512 (tl V1513))) (cons L (tl V1513))))) (true V1513)))

(defun shen.aritycheck (V1516 V1517) (cond ((and (cons? V1517) (and (cons? (hd V1517)) (and (cons? (tl (hd V1517))) (and (= () (tl (tl (hd V1517)))) (= () (tl V1517)))))) (do (shen.aritycheck-action (hd (tl (hd V1517)))) (shen.aritycheck-name V1516 (arity V1516) (length (hd (hd V1517)))))) ((and (cons? V1517) (and (cons? (hd V1517)) (and (cons? (tl (hd V1517))) (and (= () (tl (tl (hd V1517)))) (and (cons? (tl V1517)) (and (cons? (hd (tl V1517))) (and (cons? (tl (hd (tl V1517)))) (= () (tl (tl (hd (tl V1517)))))))))))) (if (= (length (hd (hd V1517))) (length (hd (hd (tl V1517))))) (do (shen.aritycheck-action (hd (tl (hd V1517)))) (shen.aritycheck V1516 (tl V1517))) (simple-error (cn "arity error in " (shen.app V1516 "
" shen.a))))) (true (shen.f_error shen.aritycheck))))

(defun shen.aritycheck-name (V1530 V1531 V1532) (cond ((= -1 V1531) V1532) ((= V1532 V1531) V1532) (true (do (shen.prhush (cn "
warning: changing the arity of " (shen.app V1530 " can cause errors.
" shen.a)) (stoutput)) V1532))))

(defun shen.aritycheck-action (V1538) (cond ((cons? V1538) (do (shen.aah (hd V1538) (tl V1538)) (for-each (lambda Y (shen.aritycheck-action Y)) V1538))) (true shen.skip)))

(defun shen.aah (V1541 V1542) (let Arity (arity V1541) (let Len (length V1542) (if (and (> Arity -1) (> Len Arity)) (shen.prhush (cn "warning: " (shen.app V1541 (cn " might not like " (shen.app Len (cn " argument" (shen.app (if (> Len 1) "s" "") ".
" shen.a)) shen.a)) shen.a)) (stoutput)) shen.skip))))

(defun shen.abstract_rule (V1544) (cond ((and (cons? V1544) (and (cons? (tl V1544)) (= () (tl (tl V1544))))) (shen.abstraction_build (hd V1544) (hd (tl V1544)))) (true (shen.f_error shen.abstract_rule))))

(defun shen.abstraction_build (V1547 V1548) (cond ((= () V1547) V1548) ((cons? V1547) (cons /. (cons (hd V1547) (cons (shen.abstraction_build (tl V1547) V1548) ())))) (true (shen.f_error shen.abstraction_build))))

(defun shen.parameters (V1550) (cond ((= 0 V1550) ()) (true (cons (gensym V) (shen.parameters (- V1550 1))))))

(defun shen.application_build (V1553 V1554) (cond ((= () V1553) V1554) ((cons? V1553) (shen.application_build (tl V1553) (cons V1554 (cons (hd V1553) ())))) (true (shen.f_error shen.application_build))))

(defun shen.compile_to_kl (V1557 V1558) (cond ((and (cons? V1558) (and (cons? (tl V1558)) (= () (tl (tl V1558))))) (let Arity (shen.store-arity V1557 (length (hd V1558))) (let Reduce (map (lambda X (shen.reduce X)) (hd (tl V1558))) (let CondExpression (shen.cond-expression V1557 (hd V1558) Reduce) (let TypeTable (if (value shen.*optimise*) (shen.typextable (shen.get-type V1557) (hd V1558)) shen.skip) (let TypedCondExpression (if (value shen.*optimise*) (shen.assign-types (hd V1558) TypeTable CondExpression) CondExpression) (cons defun (cons V1557 (cons (hd V1558) (cons TypedCondExpression ())))))))))) (true (shen.f_error shen.compile_to_kl))))

(defun shen.get-type (V1564) (cond ((cons? V1564) shen.skip) (true (let FType (assoc V1564 (value shen.*signedfuncs*)) (if (empty? FType) shen.skip (tl FType))))))

(defun shen.typextable (V1575 V1576) (cond ((and (cons? V1575) (and (cons? (tl V1575)) (and (= --> (hd (tl V1575))) (and (cons? (tl (tl V1575))) (and (= () (tl (tl (tl V1575)))) (cons? V1576)))))) (if (variable? (hd V1575)) (shen.typextable (hd (tl (tl V1575))) (tl V1576)) (cons (cons (hd V1576) (hd V1575)) (shen.typextable (hd (tl (tl V1575))) (tl V1576))))) (true ())))

(defun shen.assign-types (V1580 V1581 V1582) (cond ((and (cons? V1582) (and (= let (hd V1582)) (and (cons? (tl V1582)) (and (cons? (tl (tl V1582))) (and (cons? (tl (tl (tl V1582)))) (= () (tl (tl (tl (tl V1582)))))))))) (cons let (cons (hd (tl V1582)) (cons (shen.assign-types V1580 V1581 (hd (tl (tl V1582)))) (cons (shen.assign-types (cons (hd (tl V1582)) V1580) V1581 (hd (tl (tl (tl V1582))))) ()))))) ((and (cons? V1582) (and (= lambda (hd V1582)) (and (cons? (tl V1582)) (and (cons? (tl (tl V1582))) (= () (tl (tl (tl V1582)))))))) (cons lambda (cons (hd (tl V1582)) (cons (shen.assign-types (cons (hd (tl V1582)) V1580) V1581 (hd (tl (tl V1582)))) ())))) ((and (cons? V1582) (= cond (hd V1582))) (cons cond (map (lambda Y (cons (shen.assign-types V1580 V1581 (hd Y)) (cons (shen.assign-types V1580 V1581 (hd (tl Y))) ()))) (tl V1582)))) ((cons? V1582) (let NewTable (shen.typextable (shen.get-type (hd V1582)) (tl V1582)) (cons (hd V1582) (map (lambda Y (shen.assign-types V1580 (append V1581 NewTable) Y)) (tl V1582))))) (true (let AtomType (assoc V1582 V1581) (if (cons? AtomType) (cons type (cons V1582 (cons (tl AtomType) ()))) (if (element? V1582 V1580) V1582 (shen.atom-type V1582)))))))

(defun shen.atom-type (V1584) (if (string? V1584) (cons type (cons V1584 (cons string ()))) (if (number? V1584) (cons type (cons V1584 (cons number ()))) (if (boolean? V1584) (cons type (cons V1584 (cons boolean ()))) (if (symbol? V1584) (cons type (cons V1584 (cons symbol ()))) V1584)))))

(defun shen.store-arity (V1589 V1590) (cond ((value shen.*installing-kl*) shen.skip) (true (put V1589 arity V1590 (value *property-vector*)))))

(defun shen.reduce (V1592) (do (set shen.*teststack* ()) (let Result (shen.reduce_help V1592) (cons (cons : (cons shen.tests (reverse (value shen.*teststack*)))) (cons Result ())))))

(defun shen.reduce_help (V1594) (cond ((and (cons? V1594) (and (cons? (hd V1594)) (and (= /. (hd (hd V1594))) (and (cons? (tl (hd V1594))) (and (cons? (hd (tl (hd V1594)))) (and (= cons (hd (hd (tl (hd V1594))))) (and (cons? (tl (hd (tl (hd V1594))))) (and (cons? (tl (tl (hd (tl (hd V1594)))))) (and (= () (tl (tl (tl (hd (tl (hd V1594))))))) (and (cons? (tl (tl (hd V1594)))) (and (= () (tl (tl (tl (hd V1594))))) (and (cons? (tl V1594)) (= () (tl (tl V1594))))))))))))))) (do (shen.add_test (cons cons? (tl V1594))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V1594))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V1594)))))) (cons (shen.ebr (hd (tl V1594)) (hd (tl (hd V1594))) (hd (tl (tl (hd V1594))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons hd (tl V1594)) ())) (cons (cons tl (tl V1594)) ())) (shen.reduce_help Application))))) ((and (cons? V1594) (and (cons? (hd V1594)) (and (= /. (hd (hd V1594))) (and (cons? (tl (hd V1594))) (and (cons? (hd (tl (hd V1594)))) (and (= @p (hd (hd (tl (hd V1594))))) (and (cons? (tl (hd (tl (hd V1594))))) (and (cons? (tl (tl (hd (tl (hd V1594)))))) (and (= () (tl (tl (tl (hd (tl (hd V1594))))))) (and (cons? (tl (tl (hd V1594)))) (and (= () (tl (tl (tl (hd V1594))))) (and (cons? (tl V1594)) (= () (tl (tl V1594))))))))))))))) (do (shen.add_test (cons tuple? (tl V1594))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V1594))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V1594)))))) (cons (shen.ebr (hd (tl V1594)) (hd (tl (hd V1594))) (hd (tl (tl (hd V1594))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons fst (tl V1594)) ())) (cons (cons snd (tl V1594)) ())) (shen.reduce_help Application))))) ((and (cons? V1594) (and (cons? (hd V1594)) (and (= /. (hd (hd V1594))) (and (cons? (tl (hd V1594))) (and (cons? (hd (tl (hd V1594)))) (and (= @v (hd (hd (tl (hd V1594))))) (and (cons? (tl (hd (tl (hd V1594))))) (and (cons? (tl (tl (hd (tl (hd V1594)))))) (and (= () (tl (tl (tl (hd (tl (hd V1594))))))) (and (cons? (tl (tl (hd V1594)))) (and (= () (tl (tl (tl (hd V1594))))) (and (cons? (tl V1594)) (= () (tl (tl V1594))))))))))))))) (do (shen.add_test (cons shen.+vector? (tl V1594))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V1594))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V1594)))))) (cons (shen.ebr (hd (tl V1594)) (hd (tl (hd V1594))) (hd (tl (tl (hd V1594))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons hdv (tl V1594)) ())) (cons (cons tlv (tl V1594)) ())) (shen.reduce_help Application))))) ((and (cons? V1594) (and (cons? (hd V1594)) (and (= /. (hd (hd V1594))) (and (cons? (tl (hd V1594))) (and (cons? (hd (tl (hd V1594)))) (and (= @s (hd (hd (tl (hd V1594))))) (and (cons? (tl (hd (tl (hd V1594))))) (and (cons? (tl (tl (hd (tl (hd V1594)))))) (and (= () (tl (tl (tl (hd (tl (hd V1594))))))) (and (cons? (tl (tl (hd V1594)))) (and (= () (tl (tl (tl (hd V1594))))) (and (cons? (tl V1594)) (= () (tl (tl V1594))))))))))))))) (do (shen.add_test (cons shen.+string? (tl V1594))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V1594))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V1594)))))) (cons (shen.ebr (hd (tl V1594)) (hd (tl (hd V1594))) (hd (tl (tl (hd V1594))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons pos (cons (hd (tl V1594)) (cons 0 ()))) ())) (cons (cons tlstr (tl V1594)) ())) (shen.reduce_help Application))))) ((and (cons? V1594) (and (cons? (hd V1594)) (and (= /. (hd (hd V1594))) (and (cons? (tl (hd V1594))) (and (cons? (tl (tl (hd V1594)))) (and (= () (tl (tl (tl (hd V1594))))) (and (cons? (tl V1594)) (and (= () (tl (tl V1594))) (not (variable? (hd (tl (hd V1594))))))))))))) (do (shen.add_test (cons = (cons (hd (tl (hd V1594))) (tl V1594)))) (shen.reduce_help (hd (tl (tl (hd V1594))))))) ((and (cons? V1594) (and (cons? (hd V1594)) (and (= /. (hd (hd V1594))) (and (cons? (tl (hd V1594))) (and (cons? (tl (tl (hd V1594)))) (and (= () (tl (tl (tl (hd V1594))))) (and (cons? (tl V1594)) (= () (tl (tl V1594)))))))))) (shen.reduce_help (shen.ebr (hd (tl V1594)) (hd (tl (hd V1594))) (hd (tl (tl (hd V1594))))))) ((and (cons? V1594) (and (= where (hd V1594)) (and (cons? (tl V1594)) (and (cons? (tl (tl V1594))) (= () (tl (tl (tl V1594)))))))) (do (shen.add_test (hd (tl V1594))) (shen.reduce_help (hd (tl (tl V1594)))))) ((and (cons? V1594) (and (cons? (tl V1594)) (= () (tl (tl V1594))))) (let Z (shen.reduce_help (hd V1594)) (if (= (hd V1594) Z) V1594 (shen.reduce_help (cons Z (tl V1594)))))) (true V1594)))

(defun shen.+string? (V1596) (cond ((= "" V1596) false) (true (string? V1596))))

(defun shen.+vector? (V1598) (and (absvector? V1598) (> (<-address V1598 0) 0)))

(defun shen.ebr (V1612 V1613 V1614) (cond ((= V1614 V1613) V1612) ((and (cons? V1614) (and (= /. (hd V1614)) (and (cons? (tl V1614)) (and (cons? (tl (tl V1614))) (and (= () (tl (tl (tl V1614)))) (> (occurrences V1613 (hd (tl V1614))) 0)))))) V1614) ((and (cons? V1614) (and (= lambda (hd V1614)) (and (cons? (tl V1614)) (and (cons? (tl (tl V1614))) (and (= () (tl (tl (tl V1614)))) (> (occurrences V1613 (hd (tl V1614))) 0)))))) V1614) ((and (cons? V1614) (and (= let (hd V1614)) (and (cons? (tl V1614)) (and (cons? (tl (tl V1614))) (and (cons? (tl (tl (tl V1614)))) (and (= () (tl (tl (tl (tl V1614))))) (= (hd (tl V1614)) V1613))))))) (cons let (cons (hd (tl V1614)) (cons (shen.ebr V1612 (hd (tl V1614)) (hd (tl (tl V1614)))) (tl (tl (tl V1614))))))) ((cons? V1614) (cons (shen.ebr V1612 V1613 (hd V1614)) (shen.ebr V1612 V1613 (tl V1614)))) (true V1614)))

(defun shen.add_test (V1616) (set shen.*teststack* (cons V1616 (value shen.*teststack*))))

(defun shen.cond-expression (V1620 V1621 V1622) (let Err (shen.err-condition V1620) (let Cases (shen.case-form V1622 Err) (let EncodeChoices (shen.encode-choices Cases V1620) (shen.cond-form EncodeChoices)))))

(defun shen.cond-form (V1626) (cond ((and (cons? V1626) (and (cons? (hd V1626)) (and (= true (hd (hd V1626))) (and (cons? (tl (hd V1626))) (= () (tl (tl (hd V1626)))))))) (hd (tl (hd V1626)))) (true (cons cond V1626))))

(defun shen.encode-choices (V1631 V1632) (cond ((= () V1631) ()) ((and (cons? V1631) (and (cons? (hd V1631)) (and (= true (hd (hd V1631))) (and (cons? (tl (hd V1631))) (and (cons? (hd (tl (hd V1631)))) (and (= shen.choicepoint! (hd (hd (tl (hd V1631))))) (and (cons? (tl (hd (tl (hd V1631))))) (and (= () (tl (tl (hd (tl (hd V1631)))))) (and (= () (tl (tl (hd V1631)))) (= () (tl V1631))))))))))) (cons (cons true (cons (cons let (cons Result (cons (hd (tl (hd (tl (hd V1631))))) (cons (cons if (cons (cons = (cons Result (cons (cons fail ()) ()))) (cons (if (value shen.*installing-kl*) (cons shen.sys-error (cons V1632 ())) (cons shen.f_error (cons V1632 ()))) (cons Result ())))) ())))) ())) ())) ((and (cons? V1631) (and (cons? (hd V1631)) (and (= true (hd (hd V1631))) (and (cons? (tl (hd V1631))) (and (cons? (hd (tl (hd V1631)))) (and (= shen.choicepoint! (hd (hd (tl (hd V1631))))) (and (cons? (tl (hd (tl (hd V1631))))) (and (= () (tl (tl (hd (tl (hd V1631)))))) (= () (tl (tl (hd V1631)))))))))))) (cons (cons true (cons (cons let (cons Result (cons (hd (tl (hd (tl (hd V1631))))) (cons (cons if (cons (cons = (cons Result (cons (cons fail ()) ()))) (cons (shen.cond-form (shen.encode-choices (tl V1631) V1632)) (cons Result ())))) ())))) ())) ())) ((and (cons? V1631) (and (cons? (hd V1631)) (and (cons? (tl (hd V1631))) (and (cons? (hd (tl (hd V1631)))) (and (= shen.choicepoint! (hd (hd (tl (hd V1631))))) (and (cons? (tl (hd (tl (hd V1631))))) (and (= () (tl (tl (hd (tl (hd V1631)))))) (= () (tl (tl (hd V1631))))))))))) (cons (cons true (cons (cons let (cons Freeze (cons (cons freeze (cons (shen.cond-form (shen.encode-choices (tl V1631) V1632)) ())) (cons (cons if (cons (hd (hd V1631)) (cons (cons let (cons Result (cons (hd (tl (hd (tl (hd V1631))))) (cons (cons if (cons (cons = (cons Result (cons (cons fail ()) ()))) (cons (cons thaw (cons Freeze ())) (cons Result ())))) ())))) (cons (cons thaw (cons Freeze ())) ())))) ())))) ())) ())) ((and (cons? V1631) (and (cons? (hd V1631)) (and (cons? (tl (hd V1631))) (= () (tl (tl (hd V1631))))))) (cons (hd V1631) (shen.encode-choices (tl V1631) V1632))) (true (shen.f_error shen.encode-choices))))

(defun shen.case-form (V1639 V1640) (cond ((= () V1639) (cons V1640 ())) ((and (cons? V1639) (and (cons? (hd V1639)) (and (cons? (hd (hd V1639))) (and (= : (hd (hd (hd V1639)))) (and (cons? (tl (hd (hd V1639)))) (and (= shen.tests (hd (tl (hd (hd V1639))))) (and (= () (tl (tl (hd (hd V1639))))) (and (cons? (tl (hd V1639))) (and (cons? (hd (tl (hd V1639)))) (and (= shen.choicepoint! (hd (hd (tl (hd V1639))))) (and (cons? (tl (hd (tl (hd V1639))))) (and (= () (tl (tl (hd (tl (hd V1639)))))) (= () (tl (tl (hd V1639)))))))))))))))) (cons (cons true (tl (hd V1639))) (shen.case-form (tl V1639) V1640))) ((and (cons? V1639) (and (cons? (hd V1639)) (and (cons? (hd (hd V1639))) (and (= : (hd (hd (hd V1639)))) (and (cons? (tl (hd (hd V1639)))) (and (= shen.tests (hd (tl (hd (hd V1639))))) (and (= () (tl (tl (hd (hd V1639))))) (and (cons? (tl (hd V1639))) (= () (tl (tl (hd V1639)))))))))))) (cons (cons true (tl (hd V1639))) ())) ((and (cons? V1639) (and (cons? (hd V1639)) (and (cons? (hd (hd V1639))) (and (= : (hd (hd (hd V1639)))) (and (cons? (tl (hd (hd V1639)))) (and (= shen.tests (hd (tl (hd (hd V1639))))) (and (cons? (tl (hd V1639))) (= () (tl (tl (hd V1639))))))))))) (cons (cons (shen.embed-and (tl (tl (hd (hd V1639))))) (tl (hd V1639))) (shen.case-form (tl V1639) V1640))) (true (shen.f_error shen.case-form))))

(defun shen.embed-and (V1642) (cond ((and (cons? V1642) (= () (tl V1642))) (hd V1642)) ((cons? V1642) (cons and (cons (hd V1642) (cons (shen.embed-and (tl V1642)) ())))) (true (shen.f_error shen.embed-and))))

(defun shen.err-condition (V1644) (cons true (cons (cons shen.f_error (cons V1644 ())) ())))

(defun shen.sys-error (V1646) (simple-error (cn "system function " (shen.app V1646 ": unexpected argument
" shen.a))))



