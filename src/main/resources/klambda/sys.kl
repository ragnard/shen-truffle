"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun thaw (V2828) (V2828))

(defun eval (V2830) (let Macroexpand (shen.walk (lambda Y (macroexpand Y)) V2830) (if (shen.packaged? Macroexpand) (map (lambda Z (shen.eval-without-macros Z)) (shen.package-contents Macroexpand)) (shen.eval-without-macros Macroexpand))))

(defun shen.eval-without-macros (V2832) (eval-kl (shen.elim-def (shen.proc-input+ V2832))))

(defun shen.proc-input+ (V2834) (cond ((and (cons? V2834) (and (= input+ (hd V2834)) (and (cons? (tl V2834)) (and (cons? (tl (tl V2834))) (= () (tl (tl (tl V2834)))))))) (cons input+ (cons (shen.rcons_form (hd (tl V2834))) (tl (tl V2834))))) ((and (cons? V2834) (and (= shen.read+ (hd V2834)) (and (cons? (tl V2834)) (and (cons? (tl (tl V2834))) (= () (tl (tl (tl V2834)))))))) (cons shen.read+ (cons (shen.rcons_form (hd (tl V2834))) (tl (tl V2834))))) ((cons? V2834) (map (lambda Z (shen.proc-input+ Z)) V2834)) (true V2834)))

(defun shen.elim-def (V2836) (cond ((and (cons? V2836) (and (= define (hd V2836)) (cons? (tl V2836)))) (shen.shen->kl (hd (tl V2836)) (tl (tl V2836)))) ((and (cons? V2836) (and (= defmacro (hd V2836)) (cons? (tl V2836)))) (let Default (cons X (cons -> (cons X ()))) (let Def (shen.elim-def (cons define (cons (hd (tl V2836)) (append (tl (tl V2836)) Default)))) (let MacroAdd (shen.add-macro (hd (tl V2836))) Def)))) ((and (cons? V2836) (and (= defcc (hd V2836)) (cons? (tl V2836)))) (shen.elim-def (shen.yacc V2836))) ((cons? V2836) (map (lambda Z (shen.elim-def Z)) V2836)) (true V2836)))

(defun shen.add-macro (V2838) (let MacroReg (value shen.*macroreg*) (let NewMacroReg (set shen.*macroreg* (adjoin V2838 (value shen.*macroreg*))) (if (= MacroReg NewMacroReg) shen.skip (set *macros* (cons (function V2838) (value *macros*)))))))

(defun shen.packaged? (V2846) (cond ((and (cons? V2846) (and (= package (hd V2846)) (and (cons? (tl V2846)) (cons? (tl (tl V2846)))))) true) (true false)))

(defun external (V2848) (get/or V2848 shen.external-symbols (freeze (simple-error (cn "package " (shen.app V2848 " has not been used.
" shen.a)))) (value *property-vector*)))

(defun internal (V2850) (get/or V2850 shen.internal-symbols (freeze (simple-error (cn "package " (shen.app V2850 " has not been used.
" shen.a)))) (value *property-vector*)))

(defun shen.package-contents (V2854) (cond ((and (cons? V2854) (and (= package (hd V2854)) (and (cons? (tl V2854)) (and (= null (hd (tl V2854))) (cons? (tl (tl V2854))))))) (tl (tl (tl V2854)))) ((and (cons? V2854) (and (= package (hd V2854)) (and (cons? (tl V2854)) (cons? (tl (tl V2854)))))) (let PackageNameDot (intern (cn (str (hd (tl V2854))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (shen.packageh (hd (tl V2854)) (hd (tl (tl V2854))) (tl (tl (tl V2854))) ExpPackageNameDot)))) (true (shen.f_error shen.package-contents))))

(defun shen.walk (V2857 V2858) (cond ((cons? V2858) (V2857 (map (lambda Z (shen.walk V2857 Z)) V2858))) (true (V2857 V2858))))

(defun compile (V2862 V2863 V2864) (let O (V2862 (cons V2863 (cons () ()))) (if (or (= (fail) O) (not (empty? (hd O)))) (V2864 O) (shen.hdtl O))))

(defun fail-if (V2867 V2868) (if (V2867 V2868) (fail) V2868))

(defun @s (V2871 V2872) (cn V2871 V2872))

(defun tc? () (value shen.*tc*))

(defun ps (V2874) (get/or V2874 shen.source (freeze (simple-error (shen.app V2874 " not found.
" shen.a))) (value *property-vector*)))

(defun stinput () (value *stinput*))

(defun <-address/or (V2878 V2879 V2880) (trap-error (<-address V2878 V2879) (lambda E (thaw V2880))))

(defun value/or (V2883 V2884) (trap-error (value V2883) (lambda E (thaw V2884))))

(defun vector (V2886) (let Vector (absvector (+ V2886 1)) (let ZeroStamp (address-> Vector 0 V2886) (let Standard (if (= V2886 0) ZeroStamp (shen.fillvector ZeroStamp 1 V2886 (fail))) Standard))))

(defun shen.fillvector (V2892 V2893 V2894 V2895) (cond ((= V2894 V2893) (address-> V2892 V2894 V2895)) (true (shen.fillvector (address-> V2892 V2893 V2895) (+ 1 V2893) V2894 V2895))))

(defun vector? (V2897) (and (absvector? V2897) (let X (<-address/or V2897 0 (freeze -1)) (and (number? X) (>= X 0)))))

(defun vector-> (V2901 V2902 V2903) (if (= V2902 0) (simple-error "cannot access 0th element of a vector
") (address-> V2901 V2902 V2903)))

(defun <-vector (V2906 V2907) (if (= V2907 0) (simple-error "cannot access 0th element of a vector
") (let VectorElement (<-address V2906 V2907) (if (= VectorElement (fail)) (simple-error "vector element not found
") VectorElement))))

(defun <-vector/or (V2911 V2912 V2913) (if (= V2912 0) (simple-error "cannot access 0th element of a vector
") (let VectorElement (<-address/or V2911 V2912 V2913) (if (= VectorElement (fail)) (thaw V2913) VectorElement))))

(defun shen.posint? (V2915) (and (integer? V2915) (>= V2915 0)))

(defun limit (V2917) (<-address V2917 0))

(defun symbol? (V2919) (cond ((or (boolean? V2919) (or (number? V2919) (string? V2919))) false) (true (trap-error (let String (str V2919) (shen.analyse-symbol? String)) (lambda E false)))))

(defun shen.analyse-symbol? (V2921) (cond ((= "" V2921) false) ((shen.+string? V2921) (and (shen.alpha? (pos V2921 0)) (shen.alphanums? (tlstr V2921)))) (true (shen.f_error shen.analyse-symbol?))))

(defun shen.alpha? (V2923) (element? V2923 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" (cons "a" (cons "b" (cons "c" (cons "d" (cons "e" (cons "f" (cons "g" (cons "h" (cons "i" (cons "j" (cons "k" (cons "l" (cons "m" (cons "n" (cons "o" (cons "p" (cons "q" (cons "r" (cons "s" (cons "t" (cons "u" (cons "v" (cons "w" (cons "x" (cons "y" (cons "z" (cons "=" (cons "*" (cons "/" (cons "+" (cons "-" (cons "_" (cons "?" (cons "$" (cons "!" (cons "@" (cons "~" (cons ">" (cons "<" (cons "&" (cons "%" (cons "{" (cons "}" (cons ":" (cons ";" (cons "`" (cons "#" (cons "'" (cons "." ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.alphanums? (V2925) (cond ((= "" V2925) true) ((shen.+string? V2925) (and (shen.alphanum? (pos V2925 0)) (shen.alphanums? (tlstr V2925)))) (true (shen.f_error shen.alphanums?))))

(defun shen.alphanum? (V2927) (or (shen.alpha? V2927) (shen.digit? V2927)))

(defun shen.digit? (V2929) (element? V2929 (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))

(defun variable? (V2931) (cond ((or (boolean? V2931) (or (number? V2931) (string? V2931))) false) (true (trap-error (let String (str V2931) (shen.analyse-variable? String)) (lambda E false)))))

(defun shen.analyse-variable? (V2933) (cond ((shen.+string? V2933) (and (shen.uppercase? (pos V2933 0)) (shen.alphanums? (tlstr V2933)))) (true (shen.f_error shen.analyse-variable?))))

(defun shen.uppercase? (V2935) (element? V2935 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" ()))))))))))))))))))))))))))))

(defun gensym (V2937) (concat V2937 (set shen.*gensym* (+ 1 (value shen.*gensym*)))))

(defun concat (V2940 V2941) (intern (cn (str V2940) (str V2941))))

(defun @p (V2944 V2945) (let Vector (absvector 3) (let Tag (address-> Vector 0 shen.tuple) (let Fst (address-> Vector 1 V2944) (let Snd (address-> Vector 2 V2945) Vector)))))

(defun fst (V2947) (<-address V2947 1))

(defun snd (V2949) (<-address V2949 2))

(defun tuple? (V2951) (and (absvector? V2951) (= shen.tuple (<-address/or V2951 0 (freeze shen.not-tuple)))))

(defun append (V2954 V2955) (cond ((= () V2954) V2955) ((cons? V2954) (cons (hd V2954) (append (tl V2954) V2955))) (true (shen.f_error append))))

(defun @v (V2958 V2959) (let Limit (limit V2959) (let NewVector (vector (+ Limit 1)) (let X+NewVector (vector-> NewVector 1 V2958) (if (= Limit 0) X+NewVector (shen.@v-help V2959 1 Limit X+NewVector))))))

(defun shen.@v-help (V2965 V2966 V2967 V2968) (cond ((= V2967 V2966) (shen.copyfromvector V2965 V2968 V2967 (+ V2967 1))) (true (shen.@v-help V2965 (+ V2966 1) V2967 (shen.copyfromvector V2965 V2968 V2966 (+ V2966 1))))))

(defun shen.copyfromvector (V2973 V2974 V2975 V2976) (trap-error (vector-> V2974 V2976 (<-vector V2973 V2975)) (lambda E V2974)))

(defun hdv (V2978) (<-vector/or V2978 1 (freeze (simple-error (cn "hdv needs a non-empty vector as an argument; not " (shen.app V2978 "
" shen.s))))))

(defun tlv (V2980) (let Limit (limit V2980) (if (= Limit 0) (simple-error "cannot take the tail of the empty vector
") (if (= Limit 1) (vector 0) (let NewVector (vector (- Limit 1)) (shen.tlv-help V2980 2 Limit (vector (- Limit 1))))))))

(defun shen.tlv-help (V2986 V2987 V2988 V2989) (cond ((= V2988 V2987) (shen.copyfromvector V2986 V2989 V2988 (- V2988 1))) (true (shen.tlv-help V2986 (+ V2987 1) V2988 (shen.copyfromvector V2986 V2989 V2987 (- V2987 1))))))

(defun assoc (V3001 V3002) (cond ((= () V3002) ()) ((and (cons? V3002) (and (cons? (hd V3002)) (= (hd (hd V3002)) V3001))) (hd V3002)) ((cons? V3002) (assoc V3001 (tl V3002))) (true (shen.f_error assoc))))

(defun boolean? (V3008) (cond ((= true V3008) true) ((= false V3008) true) (true false)))

(defun nl (V3010) (cond ((= 0 V3010) 0) (true (do (shen.prhush "
" (stoutput)) (nl (- V3010 1))))))

(defun difference (V3015 V3016) (cond ((= () V3015) ()) ((cons? V3015) (if (element? (hd V3015) V3016) (difference (tl V3015) V3016) (cons (hd V3015) (difference (tl V3015) V3016)))) (true (shen.f_error difference))))

(defun do (V3019 V3020) V3020)

(defun element? (V3032 V3033) (cond ((= () V3033) false) ((and (cons? V3033) (= (hd V3033) V3032)) true) ((cons? V3033) (element? V3032 (tl V3033))) (true (shen.f_error element?))))

(defun empty? (V3039) (cond ((= () V3039) true) (true false)))

(defun fix (V3042 V3043) (shen.fix-help V3042 V3043 (V3042 V3043)))

(defun shen.fix-help (V3054 V3055 V3056) (cond ((= V3056 V3055) V3056) (true (shen.fix-help V3054 V3056 (V3054 V3056)))))

(defun dict (V3058) (cond ((< V3058 1) (simple-error (cn "invalid initial dict size: " (shen.app V3058 "" shen.s)))) (true (let D (absvector (+ 3 V3058)) (let Tag (address-> D 0 shen.dictionary) (let Capacity (address-> D 1 V3058) (let Count (address-> D 2 0) (let Fill (shen.fillvector D 3 (+ 2 V3058) ()) D))))))))

(defun dict? (V3060) (and (absvector? V3060) (= (<-address/or V3060 0 (freeze shen.not-dictionary)) shen.dictionary)))

(defun shen.dict-capacity (V3062) (<-address V3062 1))

(defun dict-count (V3064) (<-address V3064 2))

(defun shen.dict-count-> (V3067 V3068) (address-> V3067 2 V3068))

(defun shen.<-dict-bucket (V3071 V3072) (<-address V3071 (+ 3 V3072)))

(defun shen.dict-bucket-> (V3076 V3077 V3078) (address-> V3076 (+ 3 V3077) V3078))

(defun shen.set-key-entry-value (V3085 V3086 V3087) (cond ((= () V3087) (cons (cons V3085 V3086) ())) ((and (cons? V3087) (and (cons? (hd V3087)) (= (hd (hd V3087)) V3085))) (cons (cons (hd (hd V3087)) V3086) (tl V3087))) ((cons? V3087) (cons (hd V3087) (shen.set-key-entry-value V3085 V3086 (tl V3087)))) (true (shen.f_error shen.set-key-entry-value))))

(defun shen.remove-key-entry-value (V3093 V3094) (cond ((= () V3094) ()) ((and (cons? V3094) (and (cons? (hd V3094)) (= (hd (hd V3094)) V3093))) (tl V3094)) ((cons? V3094) (cons (hd V3094) (shen.remove-key-entry-value V3093 (tl V3094)))) (true (shen.f_error shen.remove-key-entry-value))))

(defun shen.dict-update-count (V3098 V3099 V3100) (let Diff (- (length V3100) (length V3099)) (shen.dict-count-> V3098 (+ Diff (dict-count V3098)))))

(defun dict-> (V3104 V3105 V3106) (let N (hash V3105 (shen.dict-capacity V3104)) (let Bucket (shen.<-dict-bucket V3104 N) (let NewBucket (shen.set-key-entry-value V3105 V3106 Bucket) (let Change (shen.dict-bucket-> V3104 N NewBucket) (let Count (shen.dict-update-count V3104 Bucket NewBucket) V3106))))))

(defun <-dict/or (V3110 V3111 V3112) (let N (hash V3111 (shen.dict-capacity V3110)) (let Bucket (shen.<-dict-bucket V3110 N) (let Result (assoc V3111 Bucket) (if (empty? Result) (thaw V3112) (tl Result))))))

(defun <-dict (V3115 V3116) (<-dict/or V3115 V3116 (freeze (simple-error "value not found
"))))

(defun dict-rm (V3119 V3120) (let N (hash V3120 (shen.dict-capacity V3119)) (let Bucket (shen.<-dict-bucket V3119 N) (let NewBucket (shen.remove-key-entry-value V3120 Bucket) (let Change (shen.dict-bucket-> V3119 N NewBucket) (let Count (shen.dict-update-count V3119 Bucket NewBucket) V3120))))))

(defun dict-fold (V3124 V3125 V3126) (let Limit (shen.dict-capacity V3125) (shen.dict-fold-h V3124 V3125 V3126 0 Limit)))

(defun shen.dict-fold-h (V3133 V3134 V3135 V3136 V3137) (cond ((= V3137 V3136) V3135) (true (let B (shen.<-dict-bucket V3134 V3136) (let Acc (shen.bucket-fold V3133 B V3135) (shen.dict-fold-h V3133 V3134 Acc (+ 1 V3136) V3137))))))

(defun shen.bucket-fold (V3141 V3142 V3143) (cond ((= () V3142) V3143) ((and (cons? V3142) (cons? (hd V3142))) (V3141 (hd (hd V3142)) (tl (hd V3142)) (shen.bucket-fold V3141 (tl V3142) V3143))) (true (shen.f_error shen.bucket-fold))))

(defun dict-keys (V3145) (dict-fold (lambda K (lambda _ (lambda Acc (cons K Acc)))) V3145 ()))

(defun dict-values (V3147) (dict-fold (lambda _ (lambda V (lambda Acc (cons V Acc)))) V3147 ()))

(defun put (V3152 V3153 V3154 V3155) (let Curr (<-dict/or V3155 V3152 (freeze ())) (let Added (shen.set-key-entry-value V3153 V3154 Curr) (let Update (dict-> V3155 V3152 Added) V3154))))

(defun unput (V3159 V3160 V3161) (let Curr (<-dict/or V3161 V3159 (freeze ())) (let Removed (shen.remove-key-entry-value V3160 Curr) (let Update (dict-> V3161 V3159 Removed) V3159))))

(defun get/or (V3166 V3167 V3168 V3169) (let Entry (<-dict/or V3169 V3166 (freeze ())) (let Result (assoc V3167 Entry) (if (empty? Result) (thaw V3168) (tl Result)))))

(defun get (V3173 V3174 V3175) (get/or V3173 V3174 (freeze (simple-error "value not found
")) V3175))

(defun hash (V3178 V3179) (shen.mod (sum (map (lambda X (string->n X)) (explode V3178))) V3179))

(defun shen.mod (V3182 V3183) (shen.modh V3182 (shen.multiples V3182 (cons V3183 ()))))

(defun shen.multiples (V3186 V3187) (cond ((and (cons? V3187) (> (hd V3187) V3186)) (tl V3187)) ((cons? V3187) (shen.multiples V3186 (cons (* 2 (hd V3187)) V3187))) (true (shen.f_error shen.multiples))))

(defun shen.modh (V3192 V3193) (cond ((= 0 V3192) 0) ((= () V3193) V3192) ((and (cons? V3193) (> (hd V3193) V3192)) (if (empty? (tl V3193)) V3192 (shen.modh V3192 (tl V3193)))) ((cons? V3193) (shen.modh (- V3192 (hd V3193)) V3193)) (true (shen.f_error shen.modh))))

(defun sum (V3195) (cond ((= () V3195) 0) ((cons? V3195) (+ (hd V3195) (sum (tl V3195)))) (true (shen.f_error sum))))

(defun head (V3203) (cond ((cons? V3203) (hd V3203)) (true (simple-error "head expects a non-empty list"))))

(defun tail (V3211) (cond ((cons? V3211) (tl V3211)) (true (simple-error "tail expects a non-empty list"))))

(defun hdstr (V3213) (pos V3213 0))

(defun intersection (V3218 V3219) (cond ((= () V3218) ()) ((cons? V3218) (if (element? (hd V3218) V3219) (cons (hd V3218) (intersection (tl V3218) V3219)) (intersection (tl V3218) V3219))) (true (shen.f_error intersection))))

(defun reverse (V3221) (shen.reverse_help V3221 ()))

(defun shen.reverse_help (V3224 V3225) (cond ((= () V3224) V3225) ((cons? V3224) (shen.reverse_help (tl V3224) (cons (hd V3224) V3225))) (true (shen.f_error shen.reverse_help))))

(defun union (V3228 V3229) (cond ((= () V3228) V3229) ((cons? V3228) (if (element? (hd V3228) V3229) (union (tl V3228) V3229) (cons (hd V3228) (union (tl V3228) V3229)))) (true (shen.f_error union))))

(defun y-or-n? (V3231) (let Message (shen.prhush (shen.proc-nl V3231) (stoutput)) (let Y-or-N (shen.prhush " (y/n) " (stoutput)) (let Input (shen.app (read (stinput)) "" shen.s) (if (= "y" Input) true (if (= "n" Input) false (do (shen.prhush "please answer y or n
" (stoutput)) (y-or-n? V3231))))))))

(defun not (V3233) (if V3233 false true))

(defun subst (V3246 V3247 V3248) (cond ((= V3248 V3247) V3246) ((cons? V3248) (map (lambda W (subst V3246 V3247 W)) V3248)) (true V3248)))

(defun explode (V3250) (shen.explode-h (shen.app V3250 "" shen.a)))

(defun shen.explode-h (V3252) (cond ((= "" V3252) ()) ((shen.+string? V3252) (cons (pos V3252 0) (shen.explode-h (tlstr V3252)))) (true (shen.f_error shen.explode-h))))

(defun cd (V3254) (set *home-directory* (if (= V3254 "") "" (shen.app V3254 "/" shen.a))))

(defun for-each (V3257 V3258) (cond ((= () V3258) true) ((cons? V3258) (let _ (V3257 (hd V3258)) (for-each V3257 (tl V3258)))) (true (shen.f_error for-each))))

(defun fold-right (V3262 V3263 V3264) (cond ((= () V3263) V3264) ((cons? V3263) (V3262 (hd V3263) (fold-right V3262 (tl V3263) V3264))) (true (shen.f_error fold-right))))

(defun fold-left (V3268 V3269 V3270) (cond ((= () V3270) V3269) ((cons? V3270) (fold-left V3268 (V3268 V3269 (hd V3270)) (tl V3270))) (true (shen.f_error fold-left))))

(defun filter (V3273 V3274) (shen.filter-h V3273 () V3274))

(defun shen.filter-h (V3284 V3285 V3286) (cond ((= () V3286) (reverse V3285)) ((and (cons? V3286) (V3284 (hd V3286))) (shen.filter-h V3284 (cons (hd V3286) V3285) (tl V3286))) ((cons? V3286) (shen.filter-h V3284 V3285 (tl V3286))) (true (shen.f_error shen.filter-h))))

(defun map (V3289 V3290) (shen.map-h V3289 V3290 ()))

(defun shen.map-h (V3296 V3297 V3298) (cond ((= () V3297) (reverse V3298)) ((cons? V3297) (shen.map-h V3296 (tl V3297) (cons (V3296 (hd V3297)) V3298))) (true (shen.f_error shen.map-h))))

(defun length (V3300) (shen.length-h V3300 0))

(defun shen.length-h (V3303 V3304) (cond ((= () V3303) V3304) (true (shen.length-h (tl V3303) (+ V3304 1)))))

(defun occurrences (V3316 V3317) (cond ((= V3317 V3316) 1) ((cons? V3317) (+ (occurrences V3316 (hd V3317)) (occurrences V3316 (tl V3317)))) (true 0)))

(defun nth (V3326 V3327) (cond ((and (= 1 V3326) (cons? V3327)) (hd V3327)) ((cons? V3327) (nth (- V3326 1) (tl V3327))) (true (shen.f_error nth))))

(defun integer? (V3329) (and (number? V3329) (let Abs (shen.abs V3329) (shen.integer-test? Abs (shen.magless Abs 1)))))

(defun shen.abs (V3331) (if (> V3331 0) V3331 (- 0 V3331)))

(defun shen.magless (V3334 V3335) (let Nx2 (* V3335 2) (if (> Nx2 V3334) V3335 (shen.magless V3334 Nx2))))

(defun shen.integer-test? (V3341 V3342) (cond ((= 0 V3341) true) ((> 1 V3341) false) (true (let Abs-N (- V3341 V3342) (if (> 0 Abs-N) (integer? V3341) (shen.integer-test? Abs-N V3342))))))

(defun mapcan (V3347 V3348) (cond ((= () V3348) ()) ((cons? V3348) (append (V3347 (hd V3348)) (mapcan V3347 (tl V3348)))) (true (shen.f_error mapcan))))

(defun == (V3360 V3361) (cond ((= V3361 V3360) true) (true false)))

(defun abort () (simple-error ""))

(defun bound? (V3363) (and (symbol? V3363) (let Val (value/or V3363 (freeze shen.this-symbol-is-unbound)) (if (= Val shen.this-symbol-is-unbound) false true))))

(defun shen.string->bytes (V3365) (cond ((= "" V3365) ()) (true (cons (string->n (pos V3365 0)) (shen.string->bytes (tlstr V3365))))))

(defun maxinferences (V3367) (set shen.*maxinferences* V3367))

(defun inferences () (value shen.*infs*))

(defun protect (V3369) V3369)

(defun stoutput () (value *stoutput*))

(defun sterror () (value *sterror*))

(defun command-line () (value *argv*))

(defun string->symbol (V3371) (let Symbol (intern V3371) (if (symbol? Symbol) Symbol (simple-error (cn "cannot intern " (shen.app V3371 " to a symbol" shen.s))))))

(defun optimise (V3377) (cond ((= + V3377) (set shen.*optimise* true)) ((= - V3377) (set shen.*optimise* false)) (true (simple-error "optimise expects a + or a -.
"))))

(defun os () (value *os*))

(defun language () (value *language*))

(defun version () (value *version*))

(defun port () (value *port*))

(defun porters () (value *porters*))

(defun implementation () (value *implementation*))

(defun release () (value *release*))

(defun package? (V3379) (trap-error (do (external V3379) true) (lambda E false)))

(defun function (V3381) (shen.lookup-func V3381))

(defun shen.lookup-func (V3383) (get/or V3383 shen.lambda-form (freeze (simple-error (shen.app V3383 " has no lambda expansion
" shen.a))) (value *property-vector*)))



