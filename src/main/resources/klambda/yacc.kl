"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4336) (cond ((and (cons? V4336) (and (= defcc (hd V4336)) (cons? (tl V4336)))) (shen.yacc->shen (hd (tl V4336)) (tl (tl V4336)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4339 V4340) (let CCRules (shen.split_cc_rules true V4340 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4339 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4342) (cond ((> (occurrences kill V4342) 0) (cons trap-error (cons V4342 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4342)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4344) (let String (error-to-string V4344) (if (= String "yacc kill") (fail) V4344)))

(defun shen.split_cc_rules (V4350 V4351 V4352) (cond ((and (= () V4351) (= () V4352)) ()) ((= () V4351) (cons (shen.split_cc_rule V4350 (reverse V4352) ()) ())) ((and (cons? V4351) (= ; (hd V4351))) (cons (shen.split_cc_rule V4350 (reverse V4352) ()) (shen.split_cc_rules V4350 (tl V4351) ()))) ((cons? V4351) (shen.split_cc_rules V4350 (tl V4351) (cons (hd V4351) V4352))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4360 V4361 V4362) (cond ((and (cons? V4361) (and (= := (hd V4361)) (and (cons? (tl V4361)) (= () (tl (tl V4361)))))) (cons (reverse V4362) (tl V4361))) ((and (cons? V4361) (and (= := (hd V4361)) (and (cons? (tl V4361)) (and (cons? (tl (tl V4361))) (and (= where (hd (tl (tl V4361)))) (and (cons? (tl (tl (tl V4361)))) (= () (tl (tl (tl (tl V4361))))))))))) (cons (reverse V4362) (cons (cons where (cons (hd (tl (tl (tl V4361)))) (cons (hd (tl V4361)) ()))) ()))) ((= () V4361) (do (shen.semantic-completion-warning V4360 V4362) (shen.split_cc_rule V4360 (cons := (cons (shen.default_semantics (reverse V4362)) ())) V4362))) ((cons? V4361) (shen.split_cc_rule V4360 (tl V4361) (cons (hd V4361) V4362))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4373 V4374) (cond ((= true V4373) (do (shen.prhush "warning: " (stoutput)) (do (for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4374)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4376) (cond ((= () V4376) ()) ((and (cons? V4376) (and (= () (tl V4376)) (shen.grammar_symbol? (hd V4376)))) (hd V4376)) ((and (cons? V4376) (shen.grammar_symbol? (hd V4376))) (cons append (cons (hd V4376) (cons (shen.default_semantics (tl V4376)) ())))) ((cons? V4376) (cons cons (cons (hd V4376) (cons (shen.default_semantics (tl V4376)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4378) (and (symbol? V4378) (let Cs (shen.strip-pathname (explode V4378)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4380) (cond ((and (cons? V4380) (= () (tl V4380))) (hd V4380)) ((cons? V4380) (let P YaccParse (cons let (cons P (cons (hd V4380) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4380)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4382) (cond ((and (cons? V4382) (and (cons? (tl V4382)) (= () (tl (tl V4382))))) (shen.syntax (hd V4382) Stream (hd (tl V4382)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4386 V4387 V4388) (cond ((and (= () V4386) (and (cons? V4388) (and (= where (hd V4388)) (and (cons? (tl V4388)) (and (cons? (tl (tl V4388))) (= () (tl (tl (tl V4388))))))))) (cons if (cons (shen.semantics (hd (tl V4388))) (cons (cons shen.pair (cons (cons hd (cons V4387 ())) (cons (shen.semantics (hd (tl (tl V4388)))) ()))) (cons (cons fail ()) ()))))) ((= () V4386) (cons shen.pair (cons (cons hd (cons V4387 ())) (cons (shen.semantics V4388) ())))) ((cons? V4386) (if (shen.grammar_symbol? (hd V4386)) (shen.recursive_descent V4386 V4387 V4388) (if (variable? (hd V4386)) (shen.variable-match V4386 V4387 V4388) (if (shen.jump_stream? (hd V4386)) (shen.jump_stream V4386 V4387 V4388) (if (shen.terminal? (hd V4386)) (shen.check_stream V4386 V4387 V4388) (if (cons? (hd V4386)) (shen.list-stream (shen.decons (hd V4386)) (tl V4386) V4387 V4388) (simple-error (shen.app (hd V4386) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4393 V4394 V4395 V4396) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4395 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V4395 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4394 (cons shen.pair (cons (cons tl (cons (cons hd (cons V4395 ())) ())) (cons (cons hd (cons (cons tl (cons V4395 ())) ())) ()))) V4396) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4393 (cons shen.pair (cons (cons hd (cons (cons hd (cons V4395 ())) ())) (cons (cons hd (cons (cons tl (cons V4395 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4398) (cond ((and (cons? V4398) (and (= cons (hd V4398)) (and (cons? (tl V4398)) (and (cons? (tl (tl V4398))) (and (= () (hd (tl (tl V4398)))) (= () (tl (tl (tl V4398))))))))) (cons (hd (tl V4398)) ())) ((and (cons? V4398) (and (= cons (hd V4398)) (and (cons? (tl V4398)) (and (cons? (tl (tl V4398))) (= () (tl (tl (tl V4398)))))))) (cons (hd (tl V4398)) (shen.decons (hd (tl (tl V4398)))))) (true V4398)))

(defun shen.insert-runon (V4413 V4414 V4415) (cond ((and (cons? V4415) (and (= shen.pair (hd V4415)) (and (cons? (tl V4415)) (and (cons? (tl (tl V4415))) (and (= () (tl (tl (tl V4415)))) (= (hd (tl (tl V4415))) V4414)))))) V4413) ((cons? V4415) (map (lambda Z (shen.insert-runon V4413 V4414 Z)) V4415)) (true V4415)))

(defun shen.strip-pathname (V4421) (cond ((not (element? "." V4421)) V4421) ((cons? V4421) (shen.strip-pathname (tl V4421))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4425 V4426 V4427) (cond ((cons? V4425) (let Test (cons (hd V4425) (cons V4426 ())) (let Action (shen.syntax (tl V4425) (concat Parse_ (hd V4425)) V4427) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4425)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4425)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4431 V4432 V4433) (cond ((cons? V4431) (let Test (cons cons? (cons (cons hd (cons V4432 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4431)) (cons (cons hd (cons (cons hd (cons V4432 ())) ())) (cons (shen.syntax (tl V4431) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4432 ())) ())) (cons (cons shen.hdtl (cons V4432 ())) ()))) V4433) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4443) (cond ((cons? V4443) false) ((variable? V4443) false) (true true)))

(defun shen.jump_stream? (V4449) (cond ((= V4449 _) true) (true false)))

(defun shen.check_stream (V4453 V4454 V4455) (cond ((cons? V4453) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4454 ())) ())) (cons (cons = (cons (hd V4453) (cons (cons hd (cons (cons hd (cons V4454 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V4453) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4454 ())) ())) (cons (cons shen.hdtl (cons V4454 ())) ()))) V4455) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4459 V4460 V4461) (cond ((cons? V4459) (let Test (cons cons? (cons (cons hd (cons V4460 ())) ())) (let Action (shen.syntax (tl V4459) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4460 ())) ())) (cons (cons shen.hdtl (cons V4460 ())) ()))) V4461) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4463) (cond ((= () V4463) ()) ((shen.grammar_symbol? V4463) (cons shen.hdtl (cons (concat Parse_ V4463) ()))) ((variable? V4463) (concat Parse_ V4463)) ((cons? V4463) (map (lambda Z (shen.semantics Z)) V4463)) (true V4463)))

(defun shen.snd-or-fail (V4471) (cond ((and (cons? V4471) (and (cons? (tl V4471)) (= () (tl (tl V4471))))) (hd (tl V4471))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V4474 V4475) (cons V4474 (cons V4475 ())))

(defun shen.hdtl (V4477) (hd (tl V4477)))

(defun <!> (V4485) (cond ((and (cons? V4485) (and (cons? (tl V4485)) (= () (tl (tl V4485))))) (cons () (cons (hd V4485) ()))) (true (fail))))

(defun <e> (V4491) (cond ((and (cons? V4491) (and (cons? (tl V4491)) (= () (tl (tl V4491))))) (cons (hd V4491) (cons () ()))) (true (shen.f_error <e>))))



