"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2636) (cond ((and (cons? V2636) (and (cons? (tl V2636)) (= () (tl (tl V2636))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2636)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2638) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2638) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2638) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2640) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2640) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2640) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2642) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2642) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2642) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2644) (let YaccParse (if (and (cons? (hd V2644)) (= if (hd (hd V2644)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2644)) (shen.hdtl V2644))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2644)) (= let (hd (hd V2644)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2644)) (shen.hdtl V2644))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2646) (if (cons? (hd V2646)) (let Parse_X (hd (hd V2646)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2646)) (shen.hdtl V2646))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2648) (if (cons? (hd V2648)) (let Parse_X (hd (hd V2648)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2648)) (shen.hdtl V2648))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2650) (cond ((and (cons? V2650) (and (cons? (tl V2650)) (and (cons? (tl (tl V2650))) (and (= () (tl (tl (tl V2650)))) (= (hd (tl V2650)) bar!))))) (cons (hd V2650) (hd (tl (tl V2650))))) ((cons? V2650) (cons (shen.remove-bar (hd V2650)) (shen.remove-bar (tl V2650)))) (true V2650)))

(defun shen.<premises> (V2652) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2652) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2652) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2654) (if (cons? (hd V2654)) (let Parse_X (hd (hd V2654)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2654)) (shen.hdtl V2654))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2656) (let YaccParse (if (and (cons? (hd V2656)) (= ! (hd (hd V2656)))) (shen.pair (hd (shen.pair (tl (hd V2656)) (shen.hdtl V2656))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2656) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2656) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2658) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2658) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2658) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2661 V2662) (@p V2661 V2662))

(defun shen.<formulae> (V2664) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2664) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2664) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2664) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2666) (if (cons? (hd V2666)) (let Parse_X (hd (hd V2666)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2666)) (shen.hdtl V2666))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2668) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2668) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2668) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2670) (let Parse_shen.<expr> (shen.<expr> V2670) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2672) (if (cons? (hd V2672)) (let Parse_X (hd (hd V2672)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2672)) (shen.hdtl V2672))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2674) (if (cons? (hd V2674)) (let Parse_X (hd (hd V2674)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2674)) (shen.hdtl V2674))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2676) (and (symbol? V2676) (shen.sh? (str V2676))))

(defun shen.sh? (V2678) (cond ((= "_" V2678) true) (true (and (= (pos V2678 0) "_") (shen.sh? (tlstr V2678))))))

(defun shen.doubleunderline? (V2680) (and (symbol? V2680) (shen.dh? (str V2680))))

(defun shen.dh? (V2682) (cond ((= "=" V2682) true) (true (and (= (pos V2682 0) "=") (shen.dh? (tlstr V2682))))))

(defun shen.process-datatype (V2685 V2686) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2685 V2686))))

(defun shen.remember-datatype (V2692) (cond ((cons? V2692) (do (set shen.*datatypes* (adjoin (hd V2692) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2692) (value shen.*alldatatypes*))) (hd V2692)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2697 V2698) (cond ((= () V2698) ()) ((and (cons? V2698) (and (tuple? (hd V2698)) (= shen.single (fst (hd V2698))))) (cons (shen.rule->horn-clause V2697 (snd (hd V2698))) (shen.rules->horn-clauses V2697 (tl V2698)))) ((and (cons? V2698) (and (tuple? (hd V2698)) (= shen.double (fst (hd V2698))))) (shen.rules->horn-clauses V2697 (append (shen.double->singles (snd (hd V2698))) (tl V2698)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2700) (cons (shen.right-rule V2700) (cons (shen.left-rule V2700) ())))

(defun shen.right-rule (V2702) (@p shen.single V2702))

(defun shen.left-rule (V2704) (cond ((and (cons? V2704) (and (cons? (tl V2704)) (and (cons? (tl (tl V2704))) (and (tuple? (hd (tl (tl V2704)))) (and (= () (fst (hd (tl (tl V2704))))) (= () (tl (tl (tl V2704))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2704)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2704))) Q) ()) (@p shen.single (cons (hd V2704) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2710) (cond ((and (tuple? V2710) (= () (fst V2710))) (snd V2710)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2713 V2714) (cond ((and (cons? V2714) (and (cons? (tl V2714)) (and (cons? (tl (tl V2714))) (and (tuple? (hd (tl (tl V2714)))) (= () (tl (tl (tl V2714)))))))) (cons (shen.rule->horn-clause-head V2713 (snd (hd (tl (tl V2714))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2714) (hd (tl V2714)) (fst (hd (tl (tl V2714))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2717 V2718) (cons V2717 (cons (shen.mode-ify V2718) (cons Context_1957 ()))))

(defun shen.mode-ify (V2720) (cond ((and (cons? V2720) (and (cons? (tl V2720)) (and (= : (hd (tl V2720))) (and (cons? (tl (tl V2720))) (= () (tl (tl (tl V2720)))))))) (cons mode (cons (cons (hd V2720) (cons : (cons (cons mode (cons (hd (tl (tl V2720))) (cons + ()))) ()))) (cons - ())))) (true V2720)))

(defun shen.rule->horn-clause-body (V2724 V2725 V2726) (let Variables (map (lambda X (shen.extract_vars X)) V2726) (let Predicates (map (lambda X (gensym shen.cl)) V2726) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2726 Variables) (let SideLiterals (shen.construct-side-literals V2724) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2726))) V2725) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2735 V2736 V2737 V2738) (cond ((and (= () V2735) (= () V2736)) ()) (true (shen.csl-help V2735 V2736 V2737 V2738))))

(defun shen.csl-help (V2745 V2746 V2747 V2748) (cond ((and (= () V2745) (= () V2746)) (cons (cons bind (cons ContextOut_1957 (cons V2747 ()))) ())) ((and (cons? V2745) (cons? V2746)) (cons (cons (hd V2745) (cons V2747 (cons V2748 (hd V2746)))) (shen.csl-help (tl V2745) (tl V2746) V2748 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2752 V2753 V2754) (cond ((and (= () V2752) (and (= () V2753) (= () V2754))) shen.skip) ((and (cons? V2752) (and (cons? V2753) (cons? V2754))) (do (shen.construct-search-clause (hd V2752) (hd V2753) (hd V2754)) (shen.construct-search-clauses (tl V2752) (tl V2753) (tl V2754)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2758 V2759 V2760) (shen.s-prolog (cons (shen.construct-base-search-clause V2758 V2759 V2760) (cons (shen.construct-recursive-search-clause V2758 V2759 V2760) ()))))

(defun shen.construct-base-search-clause (V2764 V2765 V2766) (cons (cons V2764 (cons (cons (shen.mode-ify V2765) In_1957) (cons In_1957 V2766))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2770 V2771 V2772) (cons (cons V2770 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2772))) (cons :- (cons (cons (cons V2770 (cons Assumptions_1957 (cons Out_1957 V2772))) ()) ()))))

(defun shen.construct-side-literals (V2778) (cond ((= () V2778) ()) ((and (cons? V2778) (and (cons? (hd V2778)) (and (= if (hd (hd V2778))) (and (cons? (tl (hd V2778))) (= () (tl (tl (hd V2778)))))))) (cons (cons when (tl (hd V2778))) (shen.construct-side-literals (tl V2778)))) ((and (cons? V2778) (and (cons? (hd V2778)) (and (= let (hd (hd V2778))) (and (cons? (tl (hd V2778))) (and (cons? (tl (tl (hd V2778)))) (= () (tl (tl (tl (hd V2778)))))))))) (cons (cons is (tl (hd V2778))) (shen.construct-side-literals (tl V2778)))) ((cons? V2778) (shen.construct-side-literals (tl V2778))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2785 V2786) (cond ((tuple? V2785) (cons shen.t* (cons (shen.recursive_cons_form (snd V2785)) (cons (shen.construct-context V2786 (fst V2785)) ())))) ((= ! V2785) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2789 V2790) (cond ((and (= true V2789) (= () V2790)) Context_1957) ((and (= false V2789) (= () V2790)) ContextOut_1957) ((cons? V2790) (cons cons (cons (shen.recursive_cons_form (hd V2790)) (cons (shen.construct-context V2789 (tl V2790)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2792) (cond ((cons? V2792) (cons cons (cons (shen.recursive_cons_form (hd V2792)) (cons (shen.recursive_cons_form (tl V2792)) ())))) (true V2792)))

(defun preclude (V2794) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2794)))

(defun shen.preclude-h (V2796) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2796)) (value shen.*datatypes*)))

(defun include (V2798) (shen.include-h (map (lambda X (shen.intern-type X)) V2798)))

(defun shen.include-h (V2800) (let ValidTypes (intersection V2800 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2802) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2802))))

(defun include-all-but (V2804) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2804))))

(defun shen.synonyms-help (V2810) (cond ((= () V2810) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2810) (cons? (tl V2810))) (let Vs (difference (shen.extract_vars (hd (tl V2810))) (shen.extract_vars (hd V2810))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2810) (cons (hd (tl V2810)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2810)))) (shen.free_variable_warnings (hd (tl V2810)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2813 V2814) (if (element? V2813 (value V2814)) (value V2814) (set V2814 (cons V2813 (value V2814)))))

(defun shen.demod-rule (V2816) (cond ((and (cons? V2816) (and (cons? (tl V2816)) (= () (tl (tl V2816))))) (cons (shen.rcons_form (hd V2816)) (cons -> (cons (shen.rcons_form (hd (tl V2816))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V2822) (cond ((and (cons? V2822) (and (= defun (hd V2822)) (and (cons? (tl V2822)) (and (cons? (tl (tl V2822))) (and (cons? (hd (tl (tl V2822)))) (and (= () (tl (hd (tl (tl V2822))))) (and (cons? (tl (tl (tl V2822)))) (= () (tl (tl (tl (tl V2822)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V2822)))) (tl (tl (tl V2822))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V2825 V2826) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V2826 (shen.default-rule))))))) (do (if V2825 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



